apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.apmServer.name }}
  labels:
    {{- include "oht-devops.labels" . | nindent 4 }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
spec:
  #replicas: {{ .Values.replicaCount }}
  #strategy:
    #type: RollingUpdate
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.apmServer.name }}
      {{- include "oht-devops.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Values.apmServer.name }}
        {{- include "oht-devops.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccounts.name }}
      initContainers:
      - name: provision-keystore
        image: "{{ .Values.apmServer.image.repository }}:{{ .Values.apmServer.image.tag }}"
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          set -euo pipefail
          apm-server keystore create
          #for i in /tmp/keystoreSecrets/*/*; do
            #key=$(basename $i)
            #echo "Adding file $i to keystore key $key"
            #apmServer-keystore add-file "$key" "$i"
          #done
          # Add the bootstrap password since otherwise the apmServer entrypoint tries to do this on startup
          if [ ! -z ${ELASTIC_PASSWORD+x} ]; then
            echo 'Adding env $ELASTIC_PASSWORD to keystore as key ES_APMSERVER_PASSWORD'
            echo "$ELASTIC_PASSWORD" | apm-server keystore add ES_APMSERVER_PASSWORD --stdin
          fi
          cp -a /usr/share/apm-server/data/apm-server.keystore /tmp/keystore/
        env:
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elastic-stack-secrets
              key: ES_APMSERVER_PASSWORD
        volumeMounts:
          - name: keystore
            mountPath: /tmp/keystore
          #{{- range .Values.keystore }}
          #- name: keystore-{{ .secretName }}
            #mountPath: /tmp/keystoreSecrets/{{ .secretName }}
          #{{ end }}
      containers:
        - name: {{ .Values.apmServer.name }}
          image: "{{ .Values.apmServer.image.repository }}:{{ .Values.apmServer.image.tag }}"
          imagePullPolicy: {{ .Values.apmServer.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8200
              protocol: TCP
          #livenessProbe:
            #httpGet:
              #path: /
              #port: http
          #readinessProbe:
            #httpGet:
              #path: /
              #port: http
          resources:
            {{- toYaml .Values.apmServer.resources | nindent 12 }}
          volumeMounts:
          - name: apm-server-config
            mountPath: /usr/share/apm-server/apm-server.yml
            subPath: apm-server.yml
          - name: keystore
            mountPath: /usr/share/apm-server/data/apm-server.keystore
            subPath: apm-server.keystore
          - name: {{ .Values.elasticsearch.name }}-ca
            mountPath: /usr/share/apm-server/data/certs/elasticsearch-ca.pem
            subPath: elasticsearch-ca.pem
      volumes:
      - name: apm-server-config
        configMap:
          name: {{ .Release.Name }}-configmap
      - name: keystore
        emptyDir: {}
      - name: {{ .Values.elasticsearch.name }}-ca
        secret:
          secretName: {{ .Values.elasticsearch.name }}-ca

